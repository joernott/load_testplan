name: build
# Build the binaries and prepare a release

on:
  push:
    branches:
      - 'development'

jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout development
        uses: actions/checkout@v4
        with:
          path: source

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          path: install
          ref: main

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'source/go.mod'

      - name: Prepare installation
        run: |
          find install -iname 'main-*' -delete;

      - name: Unit Test
        run: |
          cd source/testplan
          go test -v -cover -coverprofile=../../coverage.out
          go tool cover -html=../../coverage.out -o ../../coverage.html

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            coverage.out
            coverage.html

      - name: Build
        run: |
          cd source
          export CGO_ENABLED=0
          for GOOS in linux windows; do
            export GOOS
            for GOARCH in arm64 amd64; do
              export GOARCH
              go build -tags netgo,osusergo -ldflags="-s -w" -o "../install/main-${GOOS}-${GOARCH}-${{github.sha}}"
            done
          done
          sed -e "s|__VERSION__|${{github.sha}}|" invoke-binary.js.dist >../install/invoke-binary.js
          cp README.md ../install/README.md
          cp action.yml ../install/action.yml

      - name: Run UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          files: |
            install/main-linux-*
            install/main-windows-amd64-*
          args: -fq

      - name: Create branch and Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          path: 'install'
          branch: 'build/build_${{github.sha}}'
          assignees: 'joernott'
          reviewers: 'joernott'
